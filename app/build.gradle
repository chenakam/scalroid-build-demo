plugins {
    id 'com.android.application'
    //id 'org.jetbrains.kotlin.android' // Required
    // or (abbr)
    id 'kotlin-android'
    // This plugin
    id 'cash.bdo.scalroid'
}

android {
    scalroid {
        scala.zincVersion.set('1.8.0')
//        scalaCodeReferToKt = true
//        ktCodeReferToScala = false
//        javaDirsExcludes = ['/main/kotlin/', 'src/aaa/xxx']
//        message = 'Hi'
//        greeter = 'Gradle'
    }

    namespace 'com.example.demomaterial3'
    compileSdk rootProject.ext.android.compileSdk

    //testBuildType 'release'

    defaultConfig {
        applicationId "com.example.demomaterial3"
        minSdk rootProject.ext.android.minSdk
        targetSdk rootProject.ext.android.targetSdk
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName

        manifestPlaceholders = rootProject.ext.manifestPlaceholders

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        buildConfigField "boolean", "XXX", "false"

        ndk {
            //abiFilters "armeabi-v7a"
        }
    }
    splits {
        abi {
            reset()
            enable rootProject.ext.enablePerCpuArch
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "arm64-v8a" //, "x86", "x86_64"
        }
    }

    sourceSets {
        main {
            assets.srcDirs = ['src/main/assets']
            // Built directly into the plugin (don't worry about confusing the source code, have default filters)
            //java.srcDirs += ['src/main/scala']
            //kotlin.srcDirs += ['src/main/scala']
            //scala.srcDirs += ['src/main/java']
        }
    }

    packagingOptions {
        resources {
            excludes += [
                    'rootdoc.txt',
                    'META-INF/com.android.tools/proguard/coroutines.pro',
                    'META-INF/MANIFEST.MF',
                    'META-INF/proguard/coroutines.pro',
                    'org/apache/commons/codec/language/bm/sep_rules_french.txt'
            ]
        }
    }
    signingConfigs {
        release {
            String kStoreFile = System.getenv("KEY_STORE_FILE")
            boolean useDebugConf = kStoreFile == null
            if (rootProject.ext.enableScriptPrint) println(">>> signingConfigs.release" + (!useDebugConf ? "" : "\n" +
                    "    * WARNING: the config may be incorrect because of CANNOT find the release keystore settings lead to the BEBUG signing config was used currently.\n" +
                    "      If you are now releasing the product, you need to confirm that the configuration is correct, the usual practice is to\n" +
                    "      set LOCAL ENVIRONMENT VARIABLES first (see `release.sh` or similar scripts or instructions or ask someone who knows this)."))
            storeFile file(useDebugConf ? KEYSTORE_FILE : kStoreFile)
            storePassword useDebugConf ? KEYSTORE_STOREPWD : System.getenv("KEY_STORE_STORE_PWD")
            keyAlias useDebugConf ? KEYSTORE_ALIAS : System.getenv("KEY_STORE_KEY_ALIAS")
            keyPassword useDebugConf ? KEYSTORE_PASSWORD : System.getenv("KEY_STORE_KEY_PWD")
            v2SigningEnabled true
        }
        debug {
            if (rootProject.ext.enableScriptPrint) println(">>> signingConfigs.debug")
            storeFile file(KEYSTORE_FILE)
            storePassword KEYSTORE_STOREPWD
            keyAlias KEYSTORE_ALIAS
            keyPassword KEYSTORE_PASSWORD
            v2SigningEnabled true
        }
    }
    buildTypes {
        release {
            shrinkResources true
            minifyEnabled true // only `true` (or comment out)
            proguardFiles /*getDefaultProguardFile('proguard-android-optimize.txt'),*/ 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            // TODO:
            //  > Task :app:mergeExtDexXxxDebug FAILED
            //  ERROR:D8: java.lang.ArrayIndexOutOfBoundsException: Index 65535 out of bounds for length 62070
            //  com.android.builder.dexing.DexArchiveMergerException: Error while merging dex archives: xxx
            // 'com.android.application' version '7.4.0' Required (miracle)
            minifyEnabled true
            // Optional, it's would not renaming code compared to `release`.
            proguardFiles 'proguard-rules.pro'

            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"
        }
    }

    flavorDimensions "version" //, "xxx"
    productFlavors {
        github {
            // Assigns this product flavor to the "version" flavor dimension.
            // If you are using only one dimension, this property is optional,
            // and the plugin automatically assigns all the module's flavors to
            // that dimension.

//            dimension "version"
//            applicationIdSuffix ".github"
//            versionNameSuffix "-github"

            // https://developer.android.com/studio/build/manifest-build-variables
            manifestPlaceholders = [XXX_VALUE: "xxx"]
        }
        googleplay {
//            dimension "version"
//            applicationIdSuffix ".goplay"
//            versionNameSuffix "-goplay"

            manifestPlaceholders = [XXX_VALUE: "xxx"]
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = '11'
    }
    buildFeatures {
        viewBinding true
    }

    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["arm64-v8a": 1, "armeabi-v7a": 2, "x86_64": 3, "x86": 4]
            def abi = output.getFilter(com.android.build.OutputFile.ABI)
            def verCode = defaultConfig.versionCode
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride = versionCodes.get(abi) * version4Abi(verCode) + verCode
                if (rootProject.ext.enableScriptPrint) println("versionCode: $output.versionCode / $variant.applicationId / $abi")
            }
            if (variant.buildType.zipAlignEnabled) {
                output.outputFileName = genOutputApkFileName(output.outputFileName.toString(), abi, variant)
            }
        }
    }
}

def genOutputApkFileName(String defaultApkFileName, abi, variant) {
    return ("${rootProject.name}" +
            "-v${android.defaultConfig.versionName}" +
            //"-${getDate()}" + // The version name comes with the date
            "-${variant.productFlavors[0].name}" +
            "${abi ? '-' + abi.toString() : ''}.apk")
            .replaceAll(' ', '').toLowerCase()
}
// Put the highest bit +1. e.g: [1]01413935 -> [2]01413935 / [3]01413935 etc.
static def version4Abi(int code) {
    return Math.pow(10, code.toString().length() - 1).toInteger()
}

static def getDate() {
    return new Date().format('yyMMdd') // yyyyMMdd
}

// add `scalaCompileOptions` here.
tasks.withType(ScalaCompile) {
    //options.incremental = false // 不起作用，不是通过这来设置
    scalaCompileOptions.forkOptions.with {
        //memoryMaximumSize = '3g'
        //jvmArgs = ['-XX:MaxMetaspaceSize=512m']
    }
    scalaCompileOptions.with {
        //force = true // Force clean scala output classes dir and incremental `xxx.analysis` file
        it.additionalParameters = [
                //'-Ymacro-annotations',
                //"-deprecation",
                //"-explaintypes"
                // ...
        ]
    }
}

dependencies {
    // TODO: add `scalaCompilerPlugins` here.
//    scalaCompilerPlugins "org.scalamacros:paradise_$scala2.Version:[2.1.0,)"
//    scalaCompilerPlugins "org.typelevel:kind-projector_$scala2.Version:0.11.0"

    // Fixed the problem with 'R.id.xxx' marked red (compile is still OK)
    // Build error in Gradle 8.x, and 'R.id.xxx' is no longer marked in red.
//    compileOnly fileTree(include: ['**/R.jar'], dir: 'build/intermediates/compile_app_classes_jar')
//    compileOnly fileTree(include: ['**/R.jar'], dir: 'build/intermediates/compile_and_runtime_not_namespaced_r_class_jar')

//    configurations.implementation {
//        exclude group: 'com.google.guava', module: 'listenablefuture'
//    }
//    implementation 'com.google.guava:guava:31.0.1-jre'

    implementation "androidx.core:core-ktx:$ktx.Version"
    implementation 'androidx.appcompat:appcompat:1.5.0'
    implementation 'com.google.android.material:material:1.7.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.5.0'
    implementation 'androidx.navigation:navigation-ui-ktx:2.5.0'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    implementation project(':annoid')
    implementation project(':assoid')

    // Scala 3
    // https://mvnrepository.com/artifact/org.scala-lang/scala3-library
//    implementation 'org.scala-lang:scala3-library_$scala3.Binary:$scala3.Version'
//    testImplementation 'org.scalatest:scalatest_$scala3.Binary:3.2.12'
//    testImplementation 'org.scalatestplus:junit-4-13_$scala3.Binary:3.2.12.0'
//    testRuntimeOnly 'org.scala-lang.modules:scala-xml_$scala3.Binary:2.1.0'

    // Scala 2
    implementation "org.scala-lang:scala-library:$scala2.Version"
    testImplementation "org.scalatest:scalatest_$scala2.Binary:3.2.10"
    testImplementation "org.scalatestplus:junit-4-13_$scala2.Binary:3.2.2.0"
    testRuntimeOnly "org.scala-lang.modules:scala-xml_$scala2.Binary:1.3.0"
}
